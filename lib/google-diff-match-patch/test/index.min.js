/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/google-diff-match-patch@2.0.0/test/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var assert=require("assert"),test=require("testit"),diff_match_patch=require("../"),DIFF_DELETE=diff_match_patch.DIFF_DELETE,DIFF_INSERT=diff_match_patch.DIFF_INSERT,DIFF_EQUAL=diff_match_patch.DIFF_EQUAL;function assertEquivalent(a,t,e){return void 0===e&&(e=t,a="Expected: '"+(t=a)+"' Actual: '"+e+"'"),_equivalent(t,e)?assertEquals(a,String(t),String(e)):assertEquals(a,t,e)}function _equivalent(a,t){if(a==t)return!0;if("object"==typeof a&&"object"==typeof t&&null!==a&&null!==t){if(a.toString()!=t.toString())return!1;for(var e in a)if(a.hasOwnProperty(e)&&!_equivalent(a[e],t[e]))return!1;for(var e in t)if(a.hasOwnProperty(e)&&!_equivalent(a[e],t[e]))return!1;return!0}return!1}function diff_rebuildtexts(a){for(var t="",e="",E=0;E<a.length;E++)a[E][0]!=DIFF_INSERT&&(t+=a[E][1]),a[E][0]!=DIFF_DELETE&&(e+=a[E][1]);return[t,e]}var dmp=new diff_match_patch;function testDiffCommonPrefix(){assertEquals(0,dmp.diff_commonPrefix("abc","xyz")),assertEquals(4,dmp.diff_commonPrefix("1234abcdef","1234xyz")),assertEquals(4,dmp.diff_commonPrefix("1234","1234xyz"))}function testDiffCommonSuffix(){assertEquals(0,dmp.diff_commonSuffix("abc","xyz")),assertEquals(4,dmp.diff_commonSuffix("abcdef1234","xyz1234")),assertEquals(4,dmp.diff_commonSuffix("1234","xyz1234"))}function testDiffCommonOverlap(){assertEquals(0,dmp.diff_commonOverlap_("","abcd")),assertEquals(3,dmp.diff_commonOverlap_("abc","abcd")),assertEquals(0,dmp.diff_commonOverlap_("123456","abcd")),assertEquals(3,dmp.diff_commonOverlap_("123456xxx","xxxabcd")),assertEquals(0,dmp.diff_commonOverlap_("fi","ﬁi"))}function testDiffHalfMatch(){dmp.Diff_Timeout=1,assertEquals(null,dmp.diff_halfMatch_("1234567890","abcdef")),assertEquals(null,dmp.diff_halfMatch_("12345","23")),assertEquivalent(["12","90","a","z","345678"],dmp.diff_halfMatch_("1234567890","a345678z")),assertEquivalent(["a","z","12","90","345678"],dmp.diff_halfMatch_("a345678z","1234567890")),assertEquivalent(["abc","z","1234","0","56789"],dmp.diff_halfMatch_("abc56789z","1234567890")),assertEquivalent(["a","xyz","1","7890","23456"],dmp.diff_halfMatch_("a23456xyz","1234567890")),assertEquivalent(["12123","123121","a","z","1234123451234"],dmp.diff_halfMatch_("121231234123451234123121","a1234123451234z")),assertEquivalent(["","-=-=-=-=-=","x","","x-=-=-=-=-=-=-="],dmp.diff_halfMatch_("x-=-=-=-=-=-=-=-=-=-=-=-=","xx-=-=-=-=-=-=-=")),assertEquivalent(["-=-=-=-=-=","","","y","-=-=-=-=-=-=-=y"],dmp.diff_halfMatch_("-=-=-=-=-=-=-=-=-=-=-=-=y","-=-=-=-=-=-=-=yy")),assertEquivalent(["qHillo","w","x","Hulloy","HelloHe"],dmp.diff_halfMatch_("qHilloHelloHew","xHelloHeHulloy")),dmp.Diff_Timeout=0,assertEquals(null,dmp.diff_halfMatch_("qHilloHelloHew","xHelloHeHulloy"))}function testDiffLinesToChars(){function a(a,t){assertEquals(a.chars1,t.chars1),assertEquals(a.chars2,t.chars2),assertEquivalent(a.lineArray,t.lineArray)}a({chars1:"",chars2:"",lineArray:["","alpha\n","beta\n"]},dmp.diff_linesToChars_("alpha\nbeta\nalpha\n","beta\nalpha\nbeta\n")),a({chars1:"",chars2:"",lineArray:["","alpha\r\n","beta\r\n","\r\n"]},dmp.diff_linesToChars_("","alpha\r\nbeta\r\n\r\n\r\n")),a({chars1:"",chars2:"",lineArray:["","a","b"]},dmp.diff_linesToChars_("a","b"));for(var t=[],e=[],E=1;E<301;E++)t[E-1]=E+"\n",e[E-1]=String.fromCharCode(E);assertEquals(300,t.length);var n=t.join(""),s=e.join("");assertEquals(300,s.length),t.unshift(""),a({chars1:s,chars2:"",lineArray:t},dmp.diff_linesToChars_(n,""))}function testDiffCharsToLines(){var a=[[DIFF_EQUAL,""],[DIFF_INSERT,""]];dmp.diff_charsToLines_(a,["","alpha\n","beta\n"]),assertEquivalent([[DIFF_EQUAL,"alpha\nbeta\nalpha\n"],[DIFF_INSERT,"beta\nalpha\nbeta\n"]],a);for(var t=[],e=[],E=1;E<301;E++)t[E-1]=E+"\n",e[E-1]=String.fromCharCode(E);assertEquals(300,t.length);var n=t.join(""),s=e.join("");assertEquals(300,s.length),t.unshift("");a=[[DIFF_DELETE,s]];dmp.diff_charsToLines_(a,t),assertEquivalent([[DIFF_DELETE,n]],a),t=[];for(E=0;E<66e3;E++)t[E]=E+"\n";s=t.join("");var F=dmp.diff_linesToChars_(s,"");a=[[DIFF_INSERT,F.chars1]],dmp.diff_charsToLines_(a,F.lineArray),assertEquals(s,a[0][1])}function testDiffCleanupMerge(){var a=[];dmp.diff_cleanupMerge(a),assertEquivalent([],a),a=[[DIFF_EQUAL,"a"],[DIFF_DELETE,"b"],[DIFF_INSERT,"c"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_EQUAL,"a"],[DIFF_DELETE,"b"],[DIFF_INSERT,"c"]],a),a=[[DIFF_EQUAL,"a"],[DIFF_EQUAL,"b"],[DIFF_EQUAL,"c"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_EQUAL,"abc"]],a),a=[[DIFF_DELETE,"a"],[DIFF_DELETE,"b"],[DIFF_DELETE,"c"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_DELETE,"abc"]],a),a=[[DIFF_INSERT,"a"],[DIFF_INSERT,"b"],[DIFF_INSERT,"c"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_INSERT,"abc"]],a),a=[[DIFF_DELETE,"a"],[DIFF_INSERT,"b"],[DIFF_DELETE,"c"],[DIFF_INSERT,"d"],[DIFF_EQUAL,"e"],[DIFF_EQUAL,"f"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_DELETE,"ac"],[DIFF_INSERT,"bd"],[DIFF_EQUAL,"ef"]],a),a=[[DIFF_DELETE,"a"],[DIFF_INSERT,"abc"],[DIFF_DELETE,"dc"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_EQUAL,"a"],[DIFF_DELETE,"d"],[DIFF_INSERT,"b"],[DIFF_EQUAL,"c"]],a),a=[[DIFF_EQUAL,"x"],[DIFF_DELETE,"a"],[DIFF_INSERT,"abc"],[DIFF_DELETE,"dc"],[DIFF_EQUAL,"y"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_EQUAL,"xa"],[DIFF_DELETE,"d"],[DIFF_INSERT,"b"],[DIFF_EQUAL,"cy"]],a),a=[[DIFF_EQUAL,"a"],[DIFF_INSERT,"ba"],[DIFF_EQUAL,"c"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_INSERT,"ab"],[DIFF_EQUAL,"ac"]],a),a=[[DIFF_EQUAL,"c"],[DIFF_INSERT,"ab"],[DIFF_EQUAL,"a"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_EQUAL,"ca"],[DIFF_INSERT,"ba"]],a),a=[[DIFF_EQUAL,"a"],[DIFF_DELETE,"b"],[DIFF_EQUAL,"c"],[DIFF_DELETE,"ac"],[DIFF_EQUAL,"x"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_DELETE,"abc"],[DIFF_EQUAL,"acx"]],a),a=[[DIFF_EQUAL,"x"],[DIFF_DELETE,"ca"],[DIFF_EQUAL,"c"],[DIFF_DELETE,"b"],[DIFF_EQUAL,"a"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_EQUAL,"xca"],[DIFF_DELETE,"cba"]],a),a=[[DIFF_DELETE,"b"],[DIFF_INSERT,"ab"],[DIFF_EQUAL,"c"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_INSERT,"a"],[DIFF_EQUAL,"bc"]],a),a=[[DIFF_EQUAL,""],[DIFF_INSERT,"a"],[DIFF_EQUAL,"b"]],dmp.diff_cleanupMerge(a),assertEquivalent([[DIFF_INSERT,"a"],[DIFF_EQUAL,"b"]],a)}function testDiffCleanupSemanticLossless(){var a=[];dmp.diff_cleanupSemanticLossless(a),assertEquivalent([],a),a=[[DIFF_EQUAL,"AAA\r\n\r\nBBB"],[DIFF_INSERT,"\r\nDDD\r\n\r\nBBB"],[DIFF_EQUAL,"\r\nEEE"]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_EQUAL,"AAA\r\n\r\n"],[DIFF_INSERT,"BBB\r\nDDD\r\n\r\n"],[DIFF_EQUAL,"BBB\r\nEEE"]],a),a=[[DIFF_EQUAL,"AAA\r\nBBB"],[DIFF_INSERT," DDD\r\nBBB"],[DIFF_EQUAL," EEE"]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_EQUAL,"AAA\r\n"],[DIFF_INSERT,"BBB DDD\r\n"],[DIFF_EQUAL,"BBB EEE"]],a),a=[[DIFF_EQUAL,"The c"],[DIFF_INSERT,"ow and the c"],[DIFF_EQUAL,"at."]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_EQUAL,"The "],[DIFF_INSERT,"cow and the "],[DIFF_EQUAL,"cat."]],a),a=[[DIFF_EQUAL,"The-c"],[DIFF_INSERT,"ow-and-the-c"],[DIFF_EQUAL,"at."]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_EQUAL,"The-"],[DIFF_INSERT,"cow-and-the-"],[DIFF_EQUAL,"cat."]],a),a=[[DIFF_EQUAL,"a"],[DIFF_DELETE,"a"],[DIFF_EQUAL,"ax"]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_DELETE,"a"],[DIFF_EQUAL,"aax"]],a),a=[[DIFF_EQUAL,"xa"],[DIFF_DELETE,"a"],[DIFF_EQUAL,"a"]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_EQUAL,"xaa"],[DIFF_DELETE,"a"]],a),a=[[DIFF_EQUAL,"The xxx. The "],[DIFF_INSERT,"zzz. The "],[DIFF_EQUAL,"yyy."]],dmp.diff_cleanupSemanticLossless(a),assertEquivalent([[DIFF_EQUAL,"The xxx."],[DIFF_INSERT," The zzz."],[DIFF_EQUAL," The yyy."]],a)}function testDiffCleanupSemantic(){var a=[];dmp.diff_cleanupSemantic(a),assertEquivalent([],a),a=[[DIFF_DELETE,"ab"],[DIFF_INSERT,"cd"],[DIFF_EQUAL,"12"],[DIFF_DELETE,"e"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"ab"],[DIFF_INSERT,"cd"],[DIFF_EQUAL,"12"],[DIFF_DELETE,"e"]],a),a=[[DIFF_DELETE,"abc"],[DIFF_INSERT,"ABC"],[DIFF_EQUAL,"1234"],[DIFF_DELETE,"wxyz"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"abc"],[DIFF_INSERT,"ABC"],[DIFF_EQUAL,"1234"],[DIFF_DELETE,"wxyz"]],a),a=[[DIFF_DELETE,"a"],[DIFF_EQUAL,"b"],[DIFF_DELETE,"c"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"abc"],[DIFF_INSERT,"b"]],a),a=[[DIFF_DELETE,"ab"],[DIFF_EQUAL,"cd"],[DIFF_DELETE,"e"],[DIFF_EQUAL,"f"],[DIFF_INSERT,"g"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"abcdef"],[DIFF_INSERT,"cdfg"]],a),a=[[DIFF_INSERT,"1"],[DIFF_EQUAL,"A"],[DIFF_DELETE,"B"],[DIFF_INSERT,"2"],[DIFF_EQUAL,"_"],[DIFF_INSERT,"1"],[DIFF_EQUAL,"A"],[DIFF_DELETE,"B"],[DIFF_INSERT,"2"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"AB_AB"],[DIFF_INSERT,"1A2_1A2"]],a),a=[[DIFF_EQUAL,"The c"],[DIFF_DELETE,"ow and the c"],[DIFF_EQUAL,"at."]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_EQUAL,"The "],[DIFF_DELETE,"cow and the "],[DIFF_EQUAL,"cat."]],a),a=[[DIFF_DELETE,"abcxx"],[DIFF_INSERT,"xxdef"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"abcxx"],[DIFF_INSERT,"xxdef"]],a),a=[[DIFF_DELETE,"abcxxx"],[DIFF_INSERT,"xxxdef"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"abc"],[DIFF_EQUAL,"xxx"],[DIFF_INSERT,"def"]],a),a=[[DIFF_DELETE,"xxxabc"],[DIFF_INSERT,"defxxx"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_INSERT,"def"],[DIFF_EQUAL,"xxx"],[DIFF_DELETE,"abc"]],a),a=[[DIFF_DELETE,"abcd1212"],[DIFF_INSERT,"1212efghi"],[DIFF_EQUAL,"----"],[DIFF_DELETE,"A3"],[DIFF_INSERT,"3BC"]],dmp.diff_cleanupSemantic(a),assertEquivalent([[DIFF_DELETE,"abcd"],[DIFF_EQUAL,"1212"],[DIFF_INSERT,"efghi"],[DIFF_EQUAL,"----"],[DIFF_DELETE,"A"],[DIFF_EQUAL,"3"],[DIFF_INSERT,"BC"]],a)}function testDiffCleanupEfficiency(){dmp.Diff_EditCost=4;var a=[];dmp.diff_cleanupEfficiency(a),assertEquivalent([],a),a=[[DIFF_DELETE,"ab"],[DIFF_INSERT,"12"],[DIFF_EQUAL,"wxyz"],[DIFF_DELETE,"cd"],[DIFF_INSERT,"34"]],dmp.diff_cleanupEfficiency(a),assertEquivalent([[DIFF_DELETE,"ab"],[DIFF_INSERT,"12"],[DIFF_EQUAL,"wxyz"],[DIFF_DELETE,"cd"],[DIFF_INSERT,"34"]],a),a=[[DIFF_DELETE,"ab"],[DIFF_INSERT,"12"],[DIFF_EQUAL,"xyz"],[DIFF_DELETE,"cd"],[DIFF_INSERT,"34"]],dmp.diff_cleanupEfficiency(a),assertEquivalent([[DIFF_DELETE,"abxyzcd"],[DIFF_INSERT,"12xyz34"]],a),a=[[DIFF_INSERT,"12"],[DIFF_EQUAL,"x"],[DIFF_DELETE,"cd"],[DIFF_INSERT,"34"]],dmp.diff_cleanupEfficiency(a),assertEquivalent([[DIFF_DELETE,"xcd"],[DIFF_INSERT,"12x34"]],a),a=[[DIFF_DELETE,"ab"],[DIFF_INSERT,"12"],[DIFF_EQUAL,"xy"],[DIFF_INSERT,"34"],[DIFF_EQUAL,"z"],[DIFF_DELETE,"cd"],[DIFF_INSERT,"56"]],dmp.diff_cleanupEfficiency(a),assertEquivalent([[DIFF_DELETE,"abxyzcd"],[DIFF_INSERT,"12xy34z56"]],a),dmp.Diff_EditCost=5,a=[[DIFF_DELETE,"ab"],[DIFF_INSERT,"12"],[DIFF_EQUAL,"wxyz"],[DIFF_DELETE,"cd"],[DIFF_INSERT,"34"]],dmp.diff_cleanupEfficiency(a),assertEquivalent([[DIFF_DELETE,"abwxyzcd"],[DIFF_INSERT,"12wxyz34"]],a),dmp.Diff_EditCost=4}function testDiffPrettyHtml(){var a=[[DIFF_EQUAL,"a\n"],[DIFF_DELETE,"<B>b</B>"],[DIFF_INSERT,"c&d"]];assertEquals('<span>a&para;<br></span><del style="background:#ffe6e6;">&lt;B&gt;b&lt;/B&gt;</del><ins style="background:#e6ffe6;">c&amp;d</ins>',dmp.diff_prettyHtml(a))}function testDiffText(){var a=[[DIFF_EQUAL,"jump"],[DIFF_DELETE,"s"],[DIFF_INSERT,"ed"],[DIFF_EQUAL," over "],[DIFF_DELETE,"the"],[DIFF_INSERT,"a"],[DIFF_EQUAL," lazy"]];assertEquals("jumps over the lazy",dmp.diff_text1(a)),assertEquals("jumped over a lazy",dmp.diff_text2(a))}function testDiffDelta(){var a=[[DIFF_EQUAL,"jump"],[DIFF_DELETE,"s"],[DIFF_INSERT,"ed"],[DIFF_EQUAL," over "],[DIFF_DELETE,"the"],[DIFF_INSERT,"a"],[DIFF_EQUAL," lazy"],[DIFF_INSERT,"old dog"]],t=dmp.diff_text1(a);assertEquals("jumps over the lazy",t);var e=dmp.diff_toDelta(a);assertEquals("=4\t-1\t+ed\t=6\t-3\t+a\t=5\t+old dog",e),assertEquivalent(a,dmp.diff_fromDelta(t,e));try{dmp.diff_fromDelta(t+"x",e),assertEquals(Error,null)}catch(a){}try{dmp.diff_fromDelta(t.substring(1),e),assertEquals(Error,null)}catch(a){}try{dmp.diff_fromDelta("","+%c3%xy"),assertEquals(Error,null)}catch(a){}a=[[DIFF_EQUAL,"ڀ \0 \t %"],[DIFF_DELETE,"ځ  \n ^"],[DIFF_INSERT,"ڂ  \\ |"]],assertEquals("ڀ \0 \t %ځ  \n ^",t=dmp.diff_text1(a)),assertEquals("=7\t-7\t+%DA%82 %02 %5C %7C",e=dmp.diff_toDelta(a)),assertEquivalent(a,dmp.diff_fromDelta(t,e)),a=[[DIFF_INSERT,"A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ & = + $ , # "]],assertEquals("A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ & = + $ , # ",dmp.diff_text2(a)),assertEquals("+A-Z a-z 0-9 - _ . ! ~ * ' ( ) ; / ? : @ & = + $ , # ",e=dmp.diff_toDelta(a)),assertEquivalent(a,dmp.diff_fromDelta("",e));for(var E="abcdefghij",n=0;n<14;n++)E+=E;a=[[DIFF_INSERT,E]],assertEquals("+"+E,e=dmp.diff_toDelta(a)),assertEquivalent(a,dmp.diff_fromDelta("",e))}function testDiffXIndex(){assertEquals(5,dmp.diff_xIndex([[DIFF_DELETE,"a"],[DIFF_INSERT,"1234"],[DIFF_EQUAL,"xyz"]],2)),assertEquals(1,dmp.diff_xIndex([[DIFF_EQUAL,"a"],[DIFF_DELETE,"1234"],[DIFF_EQUAL,"xyz"]],3))}function testDiffLevenshtein(){assertEquals(4,dmp.diff_levenshtein([[DIFF_DELETE,"abc"],[DIFF_INSERT,"1234"],[DIFF_EQUAL,"xyz"]])),assertEquals(4,dmp.diff_levenshtein([[DIFF_EQUAL,"xyz"],[DIFF_DELETE,"abc"],[DIFF_INSERT,"1234"]])),assertEquals(7,dmp.diff_levenshtein([[DIFF_DELETE,"abc"],[DIFF_EQUAL,"xyz"],[DIFF_INSERT,"1234"]]))}function testDiffBisect(){assertEquivalent([[DIFF_DELETE,"c"],[DIFF_INSERT,"m"],[DIFF_EQUAL,"a"],[DIFF_DELETE,"t"],[DIFF_INSERT,"p"]],dmp.diff_bisect_("cat","map",Number.MAX_VALUE)),assertEquivalent([[DIFF_DELETE,"cat"],[DIFF_INSERT,"map"]],dmp.diff_bisect_("cat","map",0))}function testDiffMain(){assertEquivalent([],dmp.diff_main("","",!1)),assertEquivalent([[DIFF_EQUAL,"abc"]],dmp.diff_main("abc","abc",!1)),assertEquivalent([[DIFF_EQUAL,"ab"],[DIFF_INSERT,"123"],[DIFF_EQUAL,"c"]],dmp.diff_main("abc","ab123c",!1)),assertEquivalent([[DIFF_EQUAL,"a"],[DIFF_DELETE,"123"],[DIFF_EQUAL,"bc"]],dmp.diff_main("a123bc","abc",!1)),assertEquivalent([[DIFF_EQUAL,"a"],[DIFF_INSERT,"123"],[DIFF_EQUAL,"b"],[DIFF_INSERT,"456"],[DIFF_EQUAL,"c"]],dmp.diff_main("abc","a123b456c",!1)),assertEquivalent([[DIFF_EQUAL,"a"],[DIFF_DELETE,"123"],[DIFF_EQUAL,"b"],[DIFF_DELETE,"456"],[DIFF_EQUAL,"c"]],dmp.diff_main("a123b456c","abc",!1)),dmp.Diff_Timeout=0,assertEquivalent([[DIFF_DELETE,"a"],[DIFF_INSERT,"b"]],dmp.diff_main("a","b",!1)),assertEquivalent([[DIFF_DELETE,"Apple"],[DIFF_INSERT,"Banana"],[DIFF_EQUAL,"s are a"],[DIFF_INSERT,"lso"],[DIFF_EQUAL," fruit."]],dmp.diff_main("Apples are a fruit.","Bananas are also fruit.",!1)),assertEquivalent([[DIFF_DELETE,"a"],[DIFF_INSERT,"ڀ"],[DIFF_EQUAL,"x"],[DIFF_DELETE,"\t"],[DIFF_INSERT,"\0"]],dmp.diff_main("ax\t","ڀx\0",!1)),assertEquivalent([[DIFF_DELETE,"1"],[DIFF_EQUAL,"a"],[DIFF_DELETE,"y"],[DIFF_EQUAL,"b"],[DIFF_DELETE,"2"],[DIFF_INSERT,"xab"]],dmp.diff_main("1ayb2","abxab",!1)),assertEquivalent([[DIFF_INSERT,"xaxcx"],[DIFF_EQUAL,"abc"],[DIFF_DELETE,"y"]],dmp.diff_main("abcy","xaxcxabc",!1)),assertEquivalent([[DIFF_DELETE,"ABCD"],[DIFF_EQUAL,"a"],[DIFF_DELETE,"="],[DIFF_INSERT,"-"],[DIFF_EQUAL,"bcd"],[DIFF_DELETE,"="],[DIFF_INSERT,"-"],[DIFF_EQUAL,"efghijklmnopqrs"],[DIFF_DELETE,"EFGHIJKLMNOefg"]],dmp.diff_main("ABCDa=bcd=efghijklmnopqrsEFGHIJKLMNOefg","a-bcd-efghijklmnopqrs",!1)),assertEquivalent([[DIFF_INSERT," "],[DIFF_EQUAL,"a"],[DIFF_INSERT,"nd"],[DIFF_EQUAL," [[Pennsylvania]]"],[DIFF_DELETE," and [[New"]],dmp.diff_main("a [[Pennsylvania]] and [[New"," and [[Pennsylvania]]",!1)),dmp.Diff_Timeout=.1;for(var a="`Twas brillig, and the slithy toves\nDid gyre and gimble in the wabe:\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n",t="I am the very model of a modern major general,\nI've information vegetable, animal, and mineral,\nI know the kings of England, and I quote the fights historical,\nFrom Marathon to Waterloo, in order categorical.\n",e=0;e<10;e++)a+=a,t+=t;var E=(new Date).getTime();dmp.diff_main(a,t);var n=(new Date).getTime();assertTrue(1e3*dmp.Diff_Timeout<=n-E),assertTrue(1e3*dmp.Diff_Timeout*2>n-E),dmp.Diff_Timeout=0,a="1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n",t="abcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\nabcdefghij\n",assertEquivalent(dmp.diff_main(a,t,!1),dmp.diff_main(a,t,!0)),a="1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",t="abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij",assertEquivalent(dmp.diff_main(a,t,!1),dmp.diff_main(a,t,!0)),a="1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n",t="abcdefghij\n1234567890\n1234567890\n1234567890\nabcdefghij\n1234567890\n1234567890\n1234567890\nabcdefghij\n1234567890\n1234567890\n1234567890\nabcdefghij\n";var s=diff_rebuildtexts(dmp.diff_main(a,t,!0));assertEquivalent(diff_rebuildtexts(dmp.diff_main(a,t,!1)),s);try{dmp.diff_main(null,null),assertEquals(Error,null)}catch(a){}}function testMatchAlphabet(){assertEquivalent({a:4,b:2,c:1},dmp.match_alphabet_("abc")),assertEquivalent({a:37,b:18,c:8},dmp.match_alphabet_("abcaba"))}function testMatchBitap(){dmp.Match_Distance=100,dmp.Match_Threshold=.5,assertEquals(5,dmp.match_bitap_("abcdefghijk","fgh",5)),assertEquals(5,dmp.match_bitap_("abcdefghijk","fgh",0)),assertEquals(4,dmp.match_bitap_("abcdefghijk","efxhi",0)),assertEquals(2,dmp.match_bitap_("abcdefghijk","cdefxyhijk",5)),assertEquals(-1,dmp.match_bitap_("abcdefghijk","bxy",1)),assertEquals(2,dmp.match_bitap_("123456789xx0","3456789x0",2)),dmp.Match_Threshold=.4,assertEquals(4,dmp.match_bitap_("abcdefghijk","efxyhi",1)),dmp.Match_Threshold=.3,assertEquals(-1,dmp.match_bitap_("abcdefghijk","efxyhi",1)),dmp.Match_Threshold=0,assertEquals(1,dmp.match_bitap_("abcdefghijk","bcdef",1)),dmp.Match_Threshold=.5,assertEquals(0,dmp.match_bitap_("abcdexyzabcde","abccde",3)),assertEquals(8,dmp.match_bitap_("abcdexyzabcde","abccde",5)),dmp.Match_Distance=10,assertEquals(-1,dmp.match_bitap_("abcdefghijklmnopqrstuvwxyz","abcdefg",24)),assertEquals(0,dmp.match_bitap_("abcdefghijklmnopqrstuvwxyz","abcdxxefg",1)),dmp.Match_Distance=1e3,assertEquals(0,dmp.match_bitap_("abcdefghijklmnopqrstuvwxyz","abcdefg",24))}function testMatchMain(){assertEquals(0,dmp.match_main("abcdef","abcdef",1e3)),assertEquals(-1,dmp.match_main("","abcdef",1)),assertEquals(3,dmp.match_main("abcdef","",3)),assertEquals(3,dmp.match_main("abcdef","de",3)),assertEquals(3,dmp.match_main("abcdef","defy",4)),assertEquals(0,dmp.match_main("abcdef","abcdefy",0)),assertEquals(4,dmp.match_main("I am the very model of a modern major general."," that berry ",5));try{dmp.match_main(null,null,0),assertEquals(Error,null)}catch(a){}}function testPatchObj(){var a=new diff_match_patch.patch_obj;a.start1=20,a.start2=21,a.length1=18,a.length2=17,a.diffs=[[DIFF_EQUAL,"jump"],[DIFF_DELETE,"s"],[DIFF_INSERT,"ed"],[DIFF_EQUAL," over "],[DIFF_DELETE,"the"],[DIFF_INSERT,"a"],[DIFF_EQUAL,"\nlaz"]],assertEquals("@@ -21,18 +22,17 @@\n jump\n-s\n+ed\n  over \n-the\n+a\n %0Alaz\n",a.toString())}function testPatchFromText(){assertEquivalent([],dmp.patch_fromText(a));var a="@@ -21,18 +22,17 @@\n jump\n-s\n+ed\n  over \n-the\n+a\n %0Alaz\n";assertEquals(a,dmp.patch_fromText(a)[0].toString()),assertEquals("@@ -1 +1 @@\n-a\n+b\n",dmp.patch_fromText("@@ -1 +1 @@\n-a\n+b\n")[0].toString()),assertEquals("@@ -1,3 +0,0 @@\n-abc\n",dmp.patch_fromText("@@ -1,3 +0,0 @@\n-abc\n")[0].toString()),assertEquals("@@ -0,0 +1,3 @@\n+abc\n",dmp.patch_fromText("@@ -0,0 +1,3 @@\n+abc\n")[0].toString());try{dmp.patch_fromText("Bad\nPatch\n"),assertEquals(Error,null)}catch(a){}}function testPatchToText(){var a="@@ -21,18 +22,17 @@\n jump\n-s\n+ed\n  over \n-the\n+a\n  laz\n",t=dmp.patch_fromText(a);assertEquals(a,dmp.patch_toText(t)),a="@@ -1,9 +1,9 @@\n-f\n+F\n oo+fooba\n@@ -7,9 +7,9 @@\n obar\n-,\n+.\n  tes\n",t=dmp.patch_fromText(a),assertEquals(a,dmp.patch_toText(t))}function testPatchAddContext(){dmp.Patch_Margin=4;var a=dmp.patch_fromText("@@ -21,4 +21,10 @@\n-jump\n+somersault\n")[0];dmp.patch_addContext_(a,"The quick brown fox jumps over the lazy dog."),assertEquals("@@ -17,12 +17,18 @@\n fox \n-jump\n+somersault\n s ov\n",a.toString()),a=dmp.patch_fromText("@@ -21,4 +21,10 @@\n-jump\n+somersault\n")[0],dmp.patch_addContext_(a,"The quick brown fox jumps."),assertEquals("@@ -17,10 +17,16 @@\n fox \n-jump\n+somersault\n s.\n",a.toString()),a=dmp.patch_fromText("@@ -3 +3,2 @@\n-e\n+at\n")[0],dmp.patch_addContext_(a,"The quick brown fox jumps."),assertEquals("@@ -1,7 +1,8 @@\n Th\n-e\n+at\n  qui\n",a.toString()),a=dmp.patch_fromText("@@ -3 +3,2 @@\n-e\n+at\n")[0],dmp.patch_addContext_(a,"The quick brown fox jumps.  The quick brown fox crashes."),assertEquals("@@ -1,27 +1,28 @@\n Th\n-e\n+at\n  quick brown fox jumps. \n",a.toString())}function testPatchMake(){var a=dmp.patch_make("","");assertEquals("",dmp.patch_toText(a));var t="The quick brown fox jumps over the lazy dog.",e="That quick brown fox jumped over a lazy dog.",E="@@ -1,8 +1,7 @@\n Th\n-at\n+e\n  qui\n@@ -21,17 +21,18 @@\n jump\n-ed\n+s\n  over \n-a\n+the\n  laz\n";a=dmp.patch_make(e,t),assertEquals(E,dmp.patch_toText(a)),E="@@ -1,11 +1,12 @@\n Th\n-e\n+at\n  quick b\n@@ -22,18 +22,17 @@\n jump\n-s\n+ed\n  over \n-the\n+a\n  laz\n",a=dmp.patch_make(t,e),assertEquals(E,dmp.patch_toText(a));var n=dmp.diff_main(t,e,!1);a=dmp.patch_make(n),assertEquals(E,dmp.patch_toText(a)),a=dmp.patch_make(t,n),assertEquals(E,dmp.patch_toText(a)),a=dmp.patch_make(t,e,n),assertEquals(E,dmp.patch_toText(a)),a=dmp.patch_make("`1234567890-=[]\\;',./",'~!@#$%^&*()_+{}|:"<>?'),assertEquals("@@ -1,21 +1,21 @@\n-%601234567890-=%5B%5D%5C;',./\n+~!@#$%25%5E&*()_+%7B%7D%7C:%22%3C%3E?\n",dmp.patch_toText(a)),assertEquivalent(n=[[DIFF_DELETE,"`1234567890-=[]\\;',./"],[DIFF_INSERT,'~!@#$%^&*()_+{}|:"<>?']],dmp.patch_fromText("@@ -1,21 +1,21 @@\n-%601234567890-=%5B%5D%5C;',./\n+~!@#$%25%5E&*()_+%7B%7D%7C:%22%3C%3E?\n")[0].diffs),t="";for(var s=0;s<100;s++)t+="abcdef";e=t+"123",E="@@ -573,28 +573,31 @@\n cdefabcdefabcdefabcdefabcdef\n+123\n",a=dmp.patch_make(t,e),assertEquals(E,dmp.patch_toText(a));try{dmp.patch_make(null),assertEquals(Error,null)}catch(a){}}function testPatchSplitMax(){var a=dmp.patch_make("abcdefghijklmnopqrstuvwxyz01234567890","XabXcdXefXghXijXklXmnXopXqrXstXuvXwxXyzX01X23X45X67X89X0");dmp.patch_splitMax(a),assertEquals("@@ -1,32 +1,46 @@\n+X\n ab\n+X\n cd\n+X\n ef\n+X\n gh\n+X\n ij\n+X\n kl\n+X\n mn\n+X\n op\n+X\n qr\n+X\n st\n+X\n uv\n+X\n wx\n+X\n yz\n+X\n 012345\n@@ -25,13 +39,18 @@\n zX01\n+X\n 23\n+X\n 45\n+X\n 67\n+X\n 89\n+X\n 0\n",dmp.patch_toText(a)),a=dmp.patch_make("abcdef1234567890123456789012345678901234567890123456789012345678901234567890uvwxyz","abcdefuvwxyz");var t=dmp.patch_toText(a);dmp.patch_splitMax(a),assertEquals(t,dmp.patch_toText(a)),a=dmp.patch_make("1234567890123456789012345678901234567890123456789012345678901234567890","abc"),dmp.patch_splitMax(a),assertEquals("@@ -1,32 +1,4 @@\n-1234567890123456789012345678\n 9012\n@@ -29,32 +1,4 @@\n-9012345678901234567890123456\n 7890\n@@ -57,14 +1,3 @@\n-78901234567890\n+abc\n",dmp.patch_toText(a)),a=dmp.patch_make("abcdefghij , h : 0 , t : 1 abcdefghij , h : 0 , t : 1 abcdefghij , h : 0 , t : 1","abcdefghij , h : 1 , t : 1 abcdefghij , h : 1 , t : 1 abcdefghij , h : 0 , t : 1"),dmp.patch_splitMax(a),assertEquals("@@ -2,32 +2,32 @@\n bcdefghij , h : \n-0\n+1\n  , t : 1 abcdef\n@@ -29,32 +29,32 @@\n bcdefghij , h : \n-0\n+1\n  , t : 1 abcdef\n",dmp.patch_toText(a))}function testPatchAddPadding(){var a=dmp.patch_make("","test");assertEquals("@@ -0,0 +1,4 @@\n+test\n",dmp.patch_toText(a)),dmp.patch_addPadding(a),assertEquals("@@ -1,8 +1,12 @@\n %01%02%03%04\n+test\n %01%02%03%04\n",dmp.patch_toText(a)),a=dmp.patch_make("XY","XtestY"),assertEquals("@@ -1,2 +1,6 @@\n X\n+test\n Y\n",dmp.patch_toText(a)),dmp.patch_addPadding(a),assertEquals("@@ -2,8 +2,12 @@\n %02%03%04X\n+test\n Y%01%02%03\n",dmp.patch_toText(a)),a=dmp.patch_make("XXXXYYYY","XXXXtestYYYY"),assertEquals("@@ -1,8 +1,12 @@\n XXXX\n+test\n YYYY\n",dmp.patch_toText(a)),dmp.patch_addPadding(a),assertEquals("@@ -5,8 +5,12 @@\n XXXX\n+test\n YYYY\n",dmp.patch_toText(a))}function testPatchApply(){dmp.Match_Distance=1e3,dmp.Match_Threshold=.5,dmp.Patch_DeleteThreshold=.5;var a=dmp.patch_make("",""),t=dmp.patch_apply(a,"Hello world.");assertEquivalent(["Hello world.",[]],t),a=dmp.patch_make("The quick brown fox jumps over the lazy dog.","That quick brown fox jumped over a lazy dog."),assertEquivalent(["That quick brown fox jumped over a lazy dog.",[!0,!0]],t=dmp.patch_apply(a,"The quick brown fox jumps over the lazy dog.")),assertEquivalent(["That quick red rabbit jumped over a tired tiger.",[!0,!0]],t=dmp.patch_apply(a,"The quick red rabbit jumps over the tired tiger.")),assertEquivalent(["I am the very model of a modern major general.",[!1,!1]],t=dmp.patch_apply(a,"I am the very model of a modern major general.")),a=dmp.patch_make("x1234567890123456789012345678901234567890123456789012345678901234567890y","xabcy"),assertEquivalent(["xabcy",[!0,!0]],t=dmp.patch_apply(a,"x123456789012345678901234567890-----++++++++++-----123456789012345678901234567890y")),a=dmp.patch_make("x1234567890123456789012345678901234567890123456789012345678901234567890y","xabcy"),assertEquivalent(["xabc12345678901234567890---------------++++++++++---------------12345678901234567890y",[!1,!0]],t=dmp.patch_apply(a,"x12345678901234567890---------------++++++++++---------------12345678901234567890y")),dmp.Patch_DeleteThreshold=.6,a=dmp.patch_make("x1234567890123456789012345678901234567890123456789012345678901234567890y","xabcy"),assertEquivalent(["xabcy",[!0,!0]],t=dmp.patch_apply(a,"x12345678901234567890---------------++++++++++---------------12345678901234567890y")),dmp.Patch_DeleteThreshold=.5,dmp.Match_Threshold=0,dmp.Match_Distance=0,a=dmp.patch_make("abcdefghijklmnopqrstuvwxyz--------------------1234567890","abcXXXXXXXXXXdefghijklmnopqrstuvwxyz--------------------1234567YYYYYYYYYY890"),assertEquivalent(["ABCDEFGHIJKLMNOPQRSTUVWXYZ--------------------1234567YYYYYYYYYY890",[!1,!0]],t=dmp.patch_apply(a,"ABCDEFGHIJKLMNOPQRSTUVWXYZ--------------------1234567890")),dmp.Match_Threshold=.5,dmp.Match_Distance=1e3,a=dmp.patch_make("","test");var e=dmp.patch_toText(a);dmp.patch_apply(a,""),assertEquals(e,dmp.patch_toText(a)),a=dmp.patch_make("The quick brown fox jumps over the lazy dog.","Woof"),e=dmp.patch_toText(a),dmp.patch_apply(a,"The quick brown fox jumps over the lazy dog."),assertEquals(e,dmp.patch_toText(a)),a=dmp.patch_make("","test"),assertEquivalent(["test",[!0]],t=dmp.patch_apply(a,"")),a=dmp.patch_make("XY","XtestY"),assertEquivalent(["XtestY",[!0]],t=dmp.patch_apply(a,"XY")),a=dmp.patch_make("y","y123"),assertEquivalent(["x123",[!0]],t=dmp.patch_apply(a,"x"))}function assertEquals(a,t,e){void 0===e&&(e=t,t=a,a=void 0),assert.equal(e,t,a)}function assertTrue(a,t){void 0===t?assertEquals(!0,t=a):assertEquals(a,!0,t)}function assertFalse(a,t){void 0===t?assertEquals(!1,t=a):assertEquals(a,!1,t)}for(var tests=["testDiffCommonPrefix","testDiffCommonSuffix","testDiffCommonOverlap","testDiffHalfMatch","testDiffLinesToChars","testDiffCharsToLines","testDiffCleanupMerge","testDiffCleanupSemanticLossless","testDiffCleanupSemantic","testDiffCleanupEfficiency","testDiffPrettyHtml","testDiffText","testDiffDelta","testDiffXIndex","testDiffLevenshtein","testDiffBisect","testDiffMain","testMatchAlphabet","testMatchBitap","testMatchMain","testPatchObj","testPatchFromText","testPatchToText","testPatchAddContext","testPatchMake","testPatchSplitMax","testPatchAddPadding","testPatchApply"],x=0;x<tests.length;x++)test(tests[x],eval(tests[x]));
//# sourceMappingURL=/sm/ccdf9692df86a64df7d175a2501ef70d6068b2fe41de7c583eff94ef2d78628b.map